-- The change has already been made, but this document is to document that change in Ligi's
-- functions over time


-- Originally, before type expressions or optional semicolons, Ligi followed Zig's function style:
let add = fn(a:usize, b:usize) usize { return a + b; }

-- Then I got the idea to cement return locations into the language
  -- This was after using Nim and seeing an old idea from Zig's creator which would have done
  -- something similar.
let add = fn(a:usize, b:usize) c:usize { c = a + b; }

-- Then I started thinking "well I've done away with other parentheses, so why not these?"
  -- It was around this time that I got rid of semicolons too.
let add = fn a:usize, b:usize -> c:usize { c = a + b }

-- Then I realized "I have a result *bind location*, so why not just directly assign to it?"
let add = fn a:usize, b:usize -> c:usize = a + b -- or ` = { a + b }`  :)
-- And thus we have the modern Ligi function style:
  -- `fn`
  -- 0 or more parameter binds
  -- 1 return location, the init expression of which is the function's body.
    -- If the init expression is present, it is a function
    -- If the init expression isn't present, it can only be used as a function type

-- There may still be some remanents of the earlier styles in the samples, so I felt this
-- should be included.


-- New possible function style as of 05/29/20: Better void functions
-- This style is exactly the same as the last style, but you now omit
-- the return bind when doing a void function:
let say_hi = fn -> { printf("Saluton!") }
let tell_hi = fn name: str -> { printf("Saluton, {}!", name) }

-- Unlike normal functions, you're not allowed to omit the braces.
-- If you were, then it'd become unparsable, as you couldn't distinguish
let say_hi = fn -> printf("Saluton!")
-- from
let say_hi = fn -> printf = ("Saluton!")
-- (at least not without lookaheads, which I want to always avoid)

-- This new change allows us to get rid of `void`'s special semantics and keep it
-- as another pre-defined variable.



-- Update as of 08/21/20:
let add = fn a: usize, b: usize -> c: usize = a + b -- standard style with return
let say_hi = fn name -> _ = printf("Hello, {}!\n", name) -- void return
-- (`_` as a return location must always mean void, even though `_` can take on other types in other
--  instances, such as `let (_, x) = (1, 2)`)

-- This latest change is to remove the need for `=>` in the entire language.
-- I originally planned to also allow
let say_hi = fn name { printf("Hello, {}!\n", name) }
-- (similar to what I do allow with `if x {then}`)
-- even with blocking rules, but decided that keeping the `->` style for all is more consistent

