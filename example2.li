-- I'm a happy little comment!

let x = 1 -- I'm a constant
var y = 1 -- I'm a variable
y = 2

let s =
  -- The space after `\\` is mandatory for readability
  \\ I'm a happy
  -- multiline
  \\ string literal
assert s == "I'm a happy\nstring literal"

let name = "Inuyasha"

printf("Hello, {}", name)
defer printf("Goodbye, {}", name)

-- Function returning a usize named `b`
let add = pure fn a: usize, b: usize -> c = a + b
-- Function returning nothing
let say_hi = fn => printf("Hey")
-- (above is shorthand for)
let say_hi = fn -> _:void = printf("Hey")

if true
  printf("if")
elif false
  printf("elif")
else
  printf("else")
finally
  printf("if or elif")
-- Could also be on one line each (or altogether. please don't do this one all on one line at once)
-- Requires `=>` (read as "then" or "do")
if true => printf("if")
elif false => printf("elif")
else => printf("else")
finally => printf("if or elif")


let x: ?usize = null
if x -> val => printf(val)

let x: enum(#Me, #Not, #Neither) = #me
when x
  is #Me => printf("WasMe")
  is #Not => printf("WasNot")
  else => printf("WasNeither")
  finally =>
    printf("Either Me or Not")

for 0..20 -> i, j => printf("{} was {}", (i, j))
while true -> _, i => printf("Inf looped for the {}th time", i)

loop -> i => printf("Inf looped for the {}th time", i)
else => printf("Loop was broken from")
finally => printf("Loop was never broken from")

let Vec3 = struct
  field x: f32, y: f32, z: f32

let v = [
  .x = 10,
  .y = 20,
  .z = 30
]

let w = [
  .(x, y, z) = tup,
  .w: f32 = 10
]

-- shorthand stropping
let \if = true
-- long form, can include spaces
let $"if" = true


#label block
  printf("In block")
  break
  break #label
  break : value
  break #label : value

let w = [
  .(x, y, z) = tup,
  .w: f32 = 10
]
