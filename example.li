(: Testy commenty

var x = 5 + 6 - 1 / 2 * 3 - 4
var y: bool = true
let _ = 50
(_, x, y) = (10, 30, 50)
assert x == 25
`testy {
  break `testy
}

let stringy =
  \\ I'm
  (: Test comment
  \\ Baaaack

if x == 1 -> _ {
  printf("Was 1", ())
} elif x == 2 -> _ {
  printf("Was 2", ())
} else {
  printf("Was neither", ())
} finally {
  printf("Was either 1 or 2", ())
}

loop -> counter `thaLoop {
  std.io.printf("The only iteration is #{}", counter)
  break `theLoop
}

for 0..=10 {}
for 11..=20 -> i {}
for 11..=20 -> var i {}
for 21..=30 -> i, counter {}
for 21..=30 -> var i, counter {}
(: Not bothering to test while since it's the same code as for

until x == 0 {
  printf("X ain't 0!", ())
  x -= 1
}

(: TODO: Should this be allowed?
(: It parses at the moment, but should it?
x = 0 = 10


let Vec2 = struct {
  field
    x: f32,
    y: f32
}

(: A function that returns a value
let add = pure fn a, b: undef -> c = a + b
(: Since {} is still an expression, you can also do
let fib = pure fn n -> m = {
  if n <= 2 { 1 }
  else { fib(n-1) + fib(n-2) }
}
(: ...even though it could still be written
let fib = pure fn n -> m = if n <= 2 { 1 } else { fib(n-1) + fib(n-2) }
(: 'return val' is just an alias for 'retval = val; return'
let foo = pure fn -> c = {
  return 10 (: Note that like a break, a return must always preceed a } or a ; (preferably } )
}
(: A function that doesn't
let greet = fn -> void = printf("Saluton, mondo!")
(: Note that void and _ are considered synonyms in all usages of either.
let greet = fn -> _ = printf("Saluton, mondo!")

std.io.print("Hey").val

(: You can do more than a mere access with `.`
std.io.(printf("Hello!", _), write("test.txt", "Hello"))

(: Overloading
let showIt = overload {
  (: Block should be a bunch of public functions
  let showDefault* = fn _:usize -> void = printf("Didn't match one of the below")
  let showInt* = fn _:usize -> void = printf("Int")
  let showBool* = fn _:bool -> void = printf("Bool")
}

showIt(10) (:= Int
showIt(true) (:= Bool
showIt("Testy") (:= Didn't match one of the below
