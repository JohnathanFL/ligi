x
not x

noarg()
onearg(x)
2arg(
  1,
  2
)
2argtrailingcomma(
  1,
  2,
)

x + y * y + z/z *b

if x -> y
  printf
elif y => printy
else => dont
-- Equivalent to the above
if x -> y {
  printf
} elif y => printy
else {
  dont
}
-- `{}` can be used in place of indentation if desired


-- These 2 are equiv
x.y.z
x. -- note this only works when blocking is enabled (i.e outside `()` and `[]` or inside `{}`)
  y
  z

vec.(x, y, z)

let x = 10

-- These 2 are equiv
let x = 11, y = 12
let -- Blocking is always enabled when a bind statement is valid, so don't worry
  x = 11
  y = 12

let Vec2 = struct: -- `:` needed here to start the new block. It's a part of the operator's call.
  field
    x: f32
    y: f32
-- Note on the above `:`
-- `:` restarts precedence and allows for an indented block **if blocking is enabled**.
-- Thus, you can also do things like
if not: a and b and c => then
-- equivalent to
if not (a and b and c) => then
-- This is to be called "command style", similar to Nim's `func arg` syntax. Ligi just makes it explicit.
-- (Also works with functions):
printf: "Hello, world!"
-- (adds to the last call, or makes a new call)
printf("Hello, {}!"): "Sango" -- printf("Hello, {}!", "Sango")
printf("Hello, {}!"):
  let s = "Sango"
  s -- printf("Hello, {}!", "Sango")
-- (The second indented block style is intended for macro bodies)


let Meal = enum:
  enum Breakfast
  enum Lunch
  enum Supper
-- Equivalent to the above:
let Meal = enum {
  enum Breakfast
  enum Lunch
  enum Supper
}


-- elif/else/finally determine their location based on the indent of the leading if/for/while/etc
-- (Of course, it's recommended to write these as properly blocked structures, not with `=>`)
if x => if y => innerThen
        elif z => innerElIf
        else => innerElse
else => outerElse

-- Exception to the above: all is/else/finally must be indented from the leading `when`
when x+50 -> val
  is 10
    printf("It's 10")
  is 20
    printf("It's 20")
  else
    printf("Was neither")
  finally
    printf("Was either 10 or 20")

loop -> c
  break:1
else -> valBrokenWith
  assert valBrokenWith == 1
finally
  didntBreak

for x -> val
  break:1 
else -> valBrokenWith
  assert valBrokenWith == 1
finally -> lastValueOfVal
  didntBreak
  
while true
  break:1
else -> valBrokenWith
  broke
finally
  didntBreak


(=Vec3= x, y, z)
[1, 2, 3]
[.x, .y]

[.x = 1, .y = 2,]

let add = fn a: usize, b: usize -> c: usize = a + b

let foo =
  -- Blocking is suspended while parsing args
  fn a:usize, 
     b:usize, -- trailing comma allowed
  -- And resumed upon reading the `=>`,`{}`, or `->` for parsing the ret/body
  =>
    printf("Hey")

let ret10 = macro =>
  return 10
let get10 = fn -> a =
  ret10()

arr::map::reduce


not: true or false
-- functionally equivalent to not(true or false)

-- `:` calls are added to the most recent call
a(b): c
-- To `:` call a returned function, add `()`
a(b)(): c -- (Or just put it in the ())

arr::
  filter: fn each -> keep = each mod 2 == 0
  map: fn each -> new = each * 2

a::b::c::d
a::
  b
  c
  d

let funcs = overload [
  fn a, b -> c = a + b,
  fn c, d -> e = c / d,
]



