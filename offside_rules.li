-- This is to try and document the complete, current rules for indentation

-- Indentation matters.
-- "Level" is the indentation of the first token of the current line
-- "Our" level is the level when we entered a blocking construct, like `if` or `while`
-- Each control structure has many "arms", each of which have a "shoulder" that begin them


-- Other than `fn` and `macro`, which require either `->` or `=>`, all syntax constructs may
-- implicitly enter a block after their shoulder:
if true -- shoulder
  printf("In block") -- rest of the arm
  let x = 10
  let y = 20
else -- another shoulder
  printf("In block") -- rest of `else`'s arm

-- Within a block, a new block may only be started:
-- - After a shoulder:
if true
  let x = 1
-- - In a `:` call for listing args

-- (This will go one of two ways. The first:)
printf: 
  "Hello, {}!\n"
  "Kagome"
-- (the second:)
printf("Hello, {}!\n"):
  let s = "Kagome"
  s -- yielded as the value for this implicit block
-- (both of the above are equivalent to `printf("Hello, {}!\n", "Kagome")`)

-- - After a unary operator that used a `:`
let Vec2 = struct:
  field x: f32, y: f32
-- - After an assignment operator
let (A, B): (type, type) =
  A = struct
    field x: *B
  B = struct
    field y: *A


-- Blocking is suspended:
-- - Within `()`
let x = (
  1000
  +50
  +600
  +20.5
)
assert x == (1000 + 50 + 600 + 20.5)
-- - Within `[]`
let add = overload [
  pure fn a, b -> c =
    a + b -- this blocking is purely aesthetic
    -- another statement here before the `,` would be an error
  ,
  pure fn a: bool, b: bool -> c: bool = a xor b,
]

-- If blocking has been suspended, it can only be restarted again with `{}`:
let add = overload [
  pure fn a, b -> c = {
    let res = a + b
    c = res
  }, -- This lets us have a clear place to put the `,` without it sorta "floating" like in the last example
  pure fn a: bool, b: bool -> c: bool = a xor b,
]

-- Of course, `{}` may also be used when blocking is already in place, and may also be used to start a new
-- block directly:
if true
  {
    let x = 10
  }
  -- x is no longer in scope
  printf("End of the if block")

-- `{}` may also be used directly on control structures, in place of normal `=>`:
if true {
  
}
fn a, b {
  printf:
    "a={}, b={}\n"
    (a, b)
}
-- Of course, normal indented blocking is the officially endorsed way of doing things
-- when not inside `()` or `[]`
