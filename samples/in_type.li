-- This is to document an idea (nothing concrete yet) for a new type feature


-- In Zig, a common thing was to use @fieldParentPtr to cast a pointer to a field,
-- such as an allocator, to a pointer to a parent. This allowed a sort of
-- "composite polymorphism", where you can pass around the field's ptr but still let
-- methods access the parent.

-- However, the syntax always struck me as rather ugly. Taken from Zig's stdlib, translated to .li:
let ArenaAllocator = struct {
  let alloc = fn allocator: *Allocator, n: usize, alignment: u29 -> mem: ![]u8 = {
    let self: *ArenaAllocator = @fieldParentPtr(ArenaAllocator, "allocator", allocator)
    -- ... do stuff with self
  }
}

-- This idea would allow using the "in" operator like so:
let ArenaAllocator = struct {
  field allocator: Allocator
  -- field allocator2: Allocator -- for the second case
  
  let alloc = fn self: *Allocator in ArenaAllocator, n: usize, alignment: u29 -> mem: ![]u8 = {
    -- self is already a *ArenaAllocator
  }
  -- If there was more than one *Allocator inside ArenaAllocator, you'd specify the fieldname in a
  -- tuple:
  let alloc = fn
    self: (*Allocator, "allocator") in ArenaAllocator,
    n: usize,
    alignment: u29 -> mem: ![]u8 = {
      -- self is already a *ArenaAllocator
    }
}

-- In the first case, if ArenaAllocator has only one Allocator inside it, `in` can
-- deduce which field you mean. This makes it read very naturally:
---- self is a pointer to an Allocator found inside the ArenaAllocator we need

-- In the second case, there are two Allocators inside, so we need to specify which we have
-- a pointer to. This still reads pretty naturally:
---- self is a pointer to an Allocator named "allocator" found inside the ArenaAllocator we need

-- In both cases, the `in` operator takes args of either (*T, type) or ((*T, str), type),
-- so it shouldn't conflict with normal `in` usages (I think. Verify this.)
-- This would essentially allow a nice sugar over top of Zig's normal "composite polymorphism"
