-- An example of how you could make a simple ECS system in Ligi
-- This example does it using all global/static allocations so we don't have to
-- make assumptions about what Ligi's stdlib would look like.

-- Up to 1024 entities
let MaxEnts = 1024
let EntRange = 0..MaxEnts

let Position; struct {
  field
  	x: f32,
  	y: f32

  var storage = [:array(MaxEnts, ?@This): ]

  let move = pure fn pos: @This, vel: Velocity, step: f32 -> void = {
    pos.x += vel.x * step
    pos.y += vel.y * step
  }
  let distTo = pure fn from: @This, to: @This -> (x: f32, y: f32) = (from.x - to.x, from.y - to.y)
}
let Velocity = struct {
  field
  	x: f32,
  	y: f32

  var storage = [:array(MaxEnts, ?@This): ]
}

-- Here we also see an example  of mutual recursion in action
let World, Entity

World = struct {
	var curId = 0

	let newEnt = fn -> ent: Entity = {
  	ent = curId
  	curId += 1
	}
}

Entity = struct {
  field id: usize -- in EntRange

  let getComponent = fn self: @This, Comp: type -> comp: ?*Comp = {
    assert self.id in EntRange
    -- "orElse" will be a function of optionals. Essentially rust's unwrap_or func
    -- or Zig's orelse operator, just more granular.
    -- I may re-adopt Zig's orelse instead, however.
    -- Point is, this sets comp to the address of the inner value, or returns null otherwise.
    -- The {} are needed because technically it must be an expression inside the function call
    -- The typechecker will see that it makes it skip the call, but we have to trick the parser.
    comp = Comp.storage[self.id].orElse({return null}).addr
  }
  -- Adds or Sets
  let addComponent = fn self: @This, Comp: type, to: Comp -> void {
    assert self.id in EntRange
    Comp.storage[self.id] = to
  }
	let hasComponent = fn self: @This, Comp: type -> has:bool = {
  	assert self.id in EntRange
  	has = Comp.storage[self.id].has
	}
}


-- Simple particle simulation
-- Particle setup:
var ents = [:array(MaxEnts, Entity):]
for 0..MaxEnts -> i {
  ents[i] = World.newEnt()
  alias curEnt = ents[i]
  curEnt.addComponent(Position, [.x = i.as(f32), .y = i.as(f32)])
  curEnt.addComponent(Velocity, [.x = 0, .y = 0])

  assert curEnt.hasComponent(Position)
  assert curEnt.hasComponent(Velocity)
}
-- Simulation
let timeStep: f32 = 0.25 -- quarter second at a time
let simSteps = 10000
for 0..simSteps => {
  -- Move the particles
  for ents -> ent {
    ent.getComponent(Position).val.move(ent.getComponent(Velocity).val)
  }

  -- Update velocities
  for ents -> ent {
    let pos = ent.getComponent(Position).val
    var vel = ent.getComponent(Velocity).val
    for ents -> other {
      let (xDist, yDist) = pos.distTo(other.getComponent(Position).val)
      -- Thus the increase is greater the closer they are
      vel.x += 1.0 / xDist 
      vel.y += 1.0 / yDist 
    }
  }
}
