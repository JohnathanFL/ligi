(: This is a reimplementation of an exercise from my C# class
let Employee = struct {
  field name: str
  field rate: f64 (: Since I haven't formalized fixed-point numbers
  field hours: usize

  let min = pure fn a, b -> c = if a < b { a } else { b }
  property gross = [
    .get = pure fn self: @This -> gross =
        min(self.hours, 40).@as(f64) * self.rate
      + if self.hours > 40 { (self.hours - 40).@as(f32) * 1.5 * self.rate}
  ]
}

(: Assuming C stdlib styled IO functions

var emps: array(3, Employee) = undef
for emps -> var loc {
  var name: str, rate: f64, hours: usize
  scanf("{0} {1} {2}\n", (str.addr, rate.addr, hours.addr))
  loc = [.name = name, .rate = rate, .hours = hours]
}

for emps -> emp {
  printf("{0} earned a gross pay of ${3} at a rate of ${1}/hr for {2} hours", (emp.name, emp.rate, emp.hours, emp.gross))
}
