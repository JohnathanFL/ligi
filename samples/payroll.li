-- This is a reimplementation of an exercise from my C# class
let Employee = struct {
  -- These could also be separate `field` binds, but I've come to like the sorta "Nim-ish" style.
  field
    name: str,
    rate: f64,-- Since I haven't formalized fixed-point numbers
    hours: usize

  -- Functions don't need to declare types for their parameters. This is implicitly generic.
  let min = pure fn a, b -> c = if a < b { a } else { b }
  -- C# styled properties are created with the `property` operator on an anonymous struct
  -- with a member for each function
  let gross = property [
    .get = pure fn self: @This -> gross =
      min(self.hours, 40).as(f64) * self.rate
      + if self.hours > 40 => (self.hours - 40).as(f32) * 1.5 * self.rate
        else => 0
  ]
}

-- Assuming C stdlib styled IO functions

var emps: array(3, Employee) = undef
-- for/while locations are captured as `ref T`s, meaning they act like C++'s `T&` types
-- If the collection is constant, they're captured as `ref const T`s (`const T&`)
for emps -> loc {
  var name: str, rate: f64, hours: usize
  scanf("{0} {1} {2}\n", (str.addr, rate.addr, hours.addr))
  loc = [.name = name, .rate = rate, .hours = hours]
}

for emps -> emp {
  printf(
    "{0} earned a gross pay of ${3} at a rate of ${1}/hr for {2} hours",
    (emp.name, emp.rate, emp.hours, emp.gross)
  )
  -- The above could also be written as
  printf(
    "{0} earned a gross pay of ${3} at a rate of ${1}/hr for {2} hours",
    emp.(name, rate, hours, gross)
  )
  -- To take advantage of Ligi's swizzling
  
}
